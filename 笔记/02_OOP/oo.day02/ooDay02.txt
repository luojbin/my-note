回顾:
1.什么是类？什么是对象?
2.如何创建类？如何创建对象？如何访问成员？
3.引用类型画等号:指向同一个对象 影响另一个
4.null:空，没有指向任何对象
       若引用值为null，则不能再进行任何操作了
	   若操作则NullPointerException空指针异常





正课:
1.方法的签名:方法名+参数列表
2.方法的重载(Overload):
  1)发生在一个类中，方法名称相同，参数列表不同
  2)编译器在编译时会根据签名自动绑定调用的方法
3.构造方法:
  1)给成员变量赋初值
  2)与类同名，没有返回值类型
  3)在创建对象时被自动调用
  4)若自己不写构造方法，则编译器默认一个无参构造方法
    若自己写了构造，则不再默认提供
  5)构造方法可以重载
4.this:指代当前对象，哪个对象调方法指的就是哪个对象
       只能用在方法中，方法中访问成员变量之前默认有个this.
  this的用法:
    1)this.成员变量名--------访问成员变量
	2)this.方法名()----------调用方法(不常用)
	3)this()-----------------调用构造方法
5.引用类型数组:




任务:
1)完成Cell类的三个构造方法，并测试
2)创建包oo.day03，包含:-----每人至少两次
  2.1)Cell类，包含:
      2.1.1)成员变量:row,col
      2.1.2)构造方法:Cell(), Cell(int n), Cell(int row,int col)
      2.1.3)方法:drop(),drop(int n),moveLeft(),moveLeft(int n),getCellInfo()
  2.2)CellTest类:测试重载与构造

3.完成每周一做的两个编码题












Cell c1 = new Cell();    //0,0
Cell c2 = new Cell(3);   //3,3
Cell c3 = new Cell(2,5); //2,5

class Cell{
  int row;
  int col;
  Cell(){
    this(0,0);
  }
  Cell(int n){
    this(n,n); //调构造方法
  }
  Cell(int row,int col){
    this.row = row;
	this.col = col;
  }
}














Cell c1 = new Cell();
c1.row = 2;
c1.col = 5;

Cell c1 = new Cell(2,5);

Cell c2 = new Cell(1,4);














class Cell{
  int row; //成员
  int col;
  Cell(int row,int col){ //局部
    this.row = row;
	this.col = col;
  }
  void drop(){
    row++;
  }
}





纯字母
(数字、_、$)












Cell c1 = new Cell();
c1.row = 2;
c1.col = 5;

c1.drop();
c1.moveLeft(3);
String str = c1.getCellInfo();





Cell c2 = new Cell();
c2.row = 1;
c2.col = 4;

c2.drop();
c2.moveLeft(3);
String str = c2.getCellInfo();


class Cell{
  int row; //成员变量
  int col;
  void drop(){
    this.row++; //c2.row++;------2
  }
  void moveLeft(int n){
    this.col-=n; //c2.col-=3;-------1
  }
  String getCellInfo(){
    return this.row+","+this.col; //c2.row+","+c2.col----2,1
  }
}















自己永远也不写构造，也是没有任何问题了
--------只不过，赋值麻烦一些，重复性多一些

自己写构造，让咱们自己赋值更方便一些，复用性好











Cell c = new Cell();
c.row = 2;
c.col = 5;









Cell c1 = new Cell();
Cell c2 = new Cell(2,5);

class Cell{
  int row;
  int col;
  Cell(){
  }
  Cell(int row1,int col1){
    row = row1;
	col = col1;
  }
}










Cell c = new Cell(2,5);
Cell cc = new Cell(1,4);

Cell ccc = new Cell(); //编译错误

class Cell{
  int row;
  int col;
  Cell(int row1,int col1){
    row = row1;
	col = col1;
  }
}

















普通方法-----想做什么业务就做什么业务
构造方法-----给成员变量赋初值






Student zs = new Student("zhangsan",25,"廊坊");
Student ls = new Student("lisi",26,"佳木斯");

class Student{
  String name;
  int age;
  String address;
  //给成员变量赋值
  Student(String name1,int age1,String address1){
    name = name1;
	age = age1;
	address = address1;
  }
}



//1.创建一个Student对象
//2.自动调用了Student的构造方法
Student zs = new Student();



Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";

Student ls = new Student();
ls.name = "lisi";
ls.age = 26;
ls.address = "黑龙江佳木斯";



Student zs = new Student();
zs.setInfo("zhangsan",25,"廊坊");

Student ls = new Student();
ls.setInfo("lisi",26,"佳木斯");



几乎每个类都应该有类似于这样的一个方法

















void println(){
}
void printlnInt(int a){
}
void printlnDouble(double b){
}
void printlnBoolean(boolean c){
}
void printlnChar(char d){
}
void printlnString(String e){
}




System.out.println();
System.out.println(4);
System.out.println(56.78);
System.out.println(true);
System.out.println('a');
System.out.println("Hello");

















Cell c1 = new Cell();
c1.row = 2;
c1.col = 5;
c1.drop();
c1.moveLeft(3);
String str = c1.getCellInfo();


class Cell{ //格子类
  int row; //对象的数据
  int col;
  void drop(){ //操作对象的数据
    row++;
  }
  void moveLeft(int n){
    col-=n;
  }
  void moveRight(){
    col++;
  }
  String getCellInfo(){
    return row+","+col;
  }
}





