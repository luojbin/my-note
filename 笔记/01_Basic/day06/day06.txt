回顾:
1.适用情况:
2.嵌套循环:
    循环中套循环，外层循环走一次，内层循环走所有次
	建议:层数越少越好 break只跳一层循环
3.数组:
    相同数据类型元素的集合
	是一种数据类型(引用类型)
    int[] arr = new int[5];
    int[] arr = {1,5,7};
	int[] arr = new int[]{1,5,7};
    arr[0] = 100;
	arr[1] = 200;
	arr[3] = 300; //数组下标越界异常
    System.out.println(arr[arr.length-1]);
    for(int i=0;i<arr.length;i++){
	  arr[i] = 100;
	  System.out.println(arr[i]);
	}
	System.arraycopy(a,1,a1,0,4);
	int[] a1 = Arrays.copyOf(a,6);
    a = Arrays.copyOf(a,a.length+1);
	Arrays.sort(arr); //升序
	冒泡:
	  1)4个数冒3轮
	  2)每一轮都是从第1个元素开始冒
	    每一次都是和它的下一个元素比
	  3)冒出来的就不带它玩了



笔记:
1.方法:函数、过程
  1)用于封装一段特定的业务逻辑功能
  2)方法应尽可能的独立，一个方法只干一件事
  3)方法可以被反复调用多次
  4)减少代码重复，便于程序的维护，便于团队的协作开发
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用:
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量 = 方法名(有参传参);
4.return:
  1)return 值; //1.1)结束方法的执行  1.2)返回结果给调用方
  2)return;    //2.1)结束方法的执行




猜字符游戏:
一.设计数据结构:变量
   1)char[] chs;   //随机字符数组
   2)char[] input; //用户输入的字符数组
   3)int[] result; //对比的结果
   4)int score;    //得分
     int count;    //猜错的次数
二.设计程序结构:方法
   1)主方法:
     public static void main(String[] args){
	   //...
	 }
   2)生成随机字符数组:
     public static char[] generate(){
	   char[] chs = new char[5];
	   //...
	   return chs;
	 }
   3)对比:随机字符数组与用户输入的字符数组
     public static int[] check(char[] chs,char[] input){
	   int[] result = new int[2];
	   //...
	   return result;
	 }

三.设计算法:
      String str = "abcde";
   1)str = str.toUpperCase(); //转换为大写"ABCDE"
     str = str.toLowerCase(); //转换为小写"abcde"
   2)char[] input = str.toCharArray(); //转换为字符数组
   3)if(str.equals("EXIT")){ //判断str的内容是否是EXIT
     }



练习:
1.完成猜字符小游戏:
  1)完成generate():
    -----生成随机字符数组
  2)完成check()
    -----对比随机字符数组与用户输入的字符数组
  3)完成main()
    -----主流程控制



















只讲语法------------------吃糖豆
讲项目--------------------吃药























exit时退出

基本数据类型判断相等-----------用==

String字符串内容相等-----------equals



C)位置对为5

位置对是在字符对基础之上的











String str = scan.next();
char[] input = str.toCharArray();




str = "ABC";
input[0]='A'
input[1]='B'
input[2]='C'








1)藏一个数(chs)
2)提示用户猜吧!接收用户输入的一个数(input)
3)对比chs与input，得到对比结果(result)
  3.1)若没猜对，则先提示，再返回第2步
  3.2)若猜对了，则程序结束

















String[] strs = {"大王","小王","黑桃2"......};












//随机生成字符数组
public static char[] generate(){
  char[] chs = new char[5];

  char[] letters = {'A','B','C',...,'X','Y','Z'};
  boolean[] flags = new boolean[letters.length]; //开关数组
  for(int i=0;i<chs.length;i++){
    do{
	  int index = (int)(Math.random()*26);
	}while(flags[index]==true);
	chs[i] = letters[index];
    flags[index] = ture; //已存过
  }
  i=0 index=0  chs[0]='A' flags[0]=true 
  i=1 index=25 chs[1]='Z' flags[25]=true
  i=2 index=0/25/0/25/0/25/1 chs[2]='B' flags[1]=true
  i=3 index=0/1/25/0/1/25 ......
  i=4

  return chs;
}




i=0 index=0  chs[0]='A'
i=1 index=25 chs[1]='Z'
i=2 index=1  chs[2]='B'
i=3
i=4










//对比:随机字符数组与用户输入的字符数组
public static int[] check(char[] chs,char[] input){
  int[] result = new int[2]; //0,0--result[0]为位置对，result[1]为字符对
  
  for(int i=0;i<chs.length;i++){
    for(int j=0;j<input.length;j++){
	  if(chs[i]==input[j]){ //字符对
	    result[1]++; //字符对个数增1
        if(i==j){ //位置对
		  result[0]++; //位置对个数增1
		}
		break;
	  }
	}
  }
  i=1
    j=0 chs1-input0
	j=1 chs1-input1
	j=2 chs1-input2
	j=3 chs1-input3
	j=4 chs1-input4
  i=0
    j=0 chs0-input0
	j=1 chs0-input1
	j=2 chs0-input2
	j=3 chs0-input3
	j=4 chs0-input4

  return result;
}













public static void main(String[] args){
  say();
  sayHi("zhangsan");
  int a = getNum(); 输出a的值
  double b = plus(5.0,6.6); 输出b的值
  double m=5.0,n=6.6;
  double s=plus(m,n); 输出s的值
}
public static void say(){}
public static void sayHi(String name){}
public static int getNum(){
  return 88;
}
public static double plus(double a,double b){
  return a+b;
}

















方法可以有参也可以无参，有参可以使方法更灵活


System.out.         println("Hello");
System.             arraycopy(a,1,a1,0,4);
Arrays.             sort(arr);
double d = Math.    sqrt(25);
int[] b  = Arrays.  copyOf(a,6); //有参

int a    = scan.    nextInt();
double b = scan.    nextDouble();
double c = Math.    random();  //无参


double d = Math.sqrt(26);
double c = Math.random(); //0.0到0.9999999999之间


random()-----只能生成0.0到0.9999999999之间的随机数
sqrt(25)-----想求谁的平方根就求谁的平方根

假设random()有参
  double a = Math.random(1,1000);
  double a = Math.random(0,99);
  double a = Math.random(100,200);
  double a = Math.random(25,80);








方法可以有返回值也可以没有返回值
1)无返回值----返回值类型写成void
2)有返回值----返回值类型写成具体的数据类型即可

若方法执行完以后:
  后期还需要用到方法中的某个数据----有返回值
  后期不再需要用到方法中的某个数据--无返回值


System.out.println("Hello");
System.arraycopy(a,1,a1,0,4);
Arrays.sort(arr);  //无返回值

int a    = scan.nextInt();
double b = scan.nextDouble();
double c = Math.random();
double d = Math.sqrt(25);
int[] b  = Arrays.copyOf(a,6); //有返回值









4个开发部门
3部-----------5个组(10个多人)











10个地方用到排序了


排序(){
  冒泡6句话
}

调排序();











填充数据
Arrays.sort(arr);
输出数据














main(){
  调存----1
  调取----1
  调转----1
}
存(){
  500
}
取(){
  500-----调验证密码()
}
转(){
  1000-----调验证密码()
}
验证密码(){
}










质数:素数，只能被1和它本身整除的数

何时是质数?--------取余所有都不得0
何时不是质数?------只要有得0的

判断多次才能得到最终结果-----------开关


5是质数:
  5%2/3/4--------------都不得0
7是质数:
  7%2/3/4/5/6----------都不得0
8不是质数:
  8%2/3/4/5/6/7--------有得0的
9不是质数:
  9%2/3/4/5/6/7/8------有得0的






100
  %2/3/4/5/.../98/99
  %2/3/4/5/.../49/50
  %2/3/4/5/.../9/10


100%11/12/13/.../98/99

8%2==0
8%4==0



100平方根10
81平方根9
25平方根5











100%51/52/53/54/.../98/99










