回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所反复改变的那个数
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时，首选do...while
  3)for:应用率最高，固定次数循环
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环


笔记:
1.三种循环的更佳适用情况:
  1)while:"当..."循环
  2)do...while:"直到..."循环
               第1要素与第3要素相同时首选do...while
  3)for:固定次数循环，应用率最高
2.嵌套循环:
  1)循环中套循环，一般多行多列时使用，
    外层控制行，内层控制列
  2)执行规则:外层循环走一次，内层循环走所有次
  3)建议:嵌套的层数越少越好，能用一层就不用两层
         若必须超过三层才能实现，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
	设计良好的数据结构会导致好的算法
3.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[4];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
	  int[] arr = {1,4,5,8}; //1,4,5,8
	  int[] arr = new int[]{1,4,5,8}; //1,4,5,8
	  int[] arr;
	  arr = {1,4,5,8}; //编译错误
	  arr = new int[]{1,4,5,8}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)可以获取数组的长度
	      int[] arr = new int[5];
		  System.out.println(arr.length); //5
	5.2)通过下标来访问数组中的元素
	    下标从0开始，最大到(数组.length-1)
		  int[] arr = new int[3];
		  arr[0] = 100; //给arr中第1个元素赋值为100
		  arr[1] = 200; //给arr中第2个元素赋值为200
		  arr[2] = 300; //给arr中第3个元素赋值为300
		  arr[3] = 400; //数组下标越界异常
		  System.out.println(arr[arr.length-1]); //输出arr中的最后一个元素
  6)数组的遍历:
      int[] arr = new int[10];
	  for(int i=0;i<arr.length;i++){
	    arr[i] = (int)(Math.random()*100);
	  }
      for(int i=0;i<arr.length;i++){ //正序
	    System.out.println(arr[i]);
	  }
      for(int i=arr.length-1;i>=0;i--){ //倒序
	    System.out.println(arr[i]);
	  }
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4);
	7.2)int[] a1 = Arrays.copyOf(a,6);
	    a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
    8.1)Arrays.sort(arr); //升序，效率高
	8.2)冒泡排序:
	    8.2.1)四个数冒三轮
        8.2.2)每一轮都是从第1个元素开始冒
              每一次都是和它的下一个元素比
        8.2.3)冒出来的就不带它玩了


练习: 至少重写一次
1)九九乘法表
2)找到数组中最大值并扩容后放在最后一位
3)冒泡排序
  3.1)声明整型数组arr，包含10个元素，
      将每个元素赋值为0到99的随机数
      输出arr中每个元素的值
  3.2)冒泡算法对arr进行升序排序
  3.3)遍历输出arr中每个元素的值










BubbleSort













    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次




for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //控制次
    if(arr[j]>arr[j+1]){ //和它下一个元素比
	  int t=arr[j]; //若满足则交换
	  arr[j]=arr[j+1];
	  arr[j+1]=t;
	}
  }
}



冒泡排序:
1)四个数冒三轮
2)每一轮都是从第1个元素开始冒
  每一次都是和它的下一个元素比
3)冒出来的就不带它玩了

int[] arr = {45,8,23,1};
第一轮:
  45和8比，换，8,45,23,1
  45和23比，换，8,23,45,1
  45和1比，换，8,23,1,45-----------45冒出来了
第二轮:
  8和23比，不换
  23和1比，换，8,1,23,45-----------23冒出来了
第三轮:
  8和1比，换，1,8,23,45------------8冒出来了


















不同的数据，使用不同的排序方式，优劣是不同的


这10万个数据----------插入排序最快
另10万个数据----------冒泡排序最快
另10万个数据----------快速排序最快


Arrays.sort(arr); //对arr升序排列



long a = System.currentTimeMillis();
功能代码
long b = System.currentTimeMillis();

System.out.println(b-a); //2











数组的长度一旦定义好，就不能改变了









int[] a = {10,20,30,40,50};
int[] b = new int[6]; //0,0,0,0,0,0



for(int i=0;i<a.length;i++){
  b[i]=a[i];
}

b[0]=a[0];
b[1]=a[1];
b[2]=a[2];
b[3]=a[3];
b[4]=a[4];


















int[] arr = {5,23,56,34};
找最大值的算法:
1)假设第1个元素的值最大
    int max = arr[0];
2)遍历剩余元素，若剩余元素比max大，
  则修改max为较大的值
    for(int i=1;i<arr.length;i++){
	  if(arr[i]>max){
	    max=arr[i];
	  }
	}

max=5/23/56











ArrayDemo














int[] arr = new int[10];
for(int i=0;i<arr.length;i++){
  arr[i] = 100;
}

for(int i=0;i<arr.length;i++){ //正序输出
  System.out.println(arr[i]);
}
for(int i=arr.length-1;i>=0;i--){ //倒序输出
  System.out.println(arr[i]);
}






System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
System.out.println(arr[4]);
System.out.println(arr[5]);
System.out.println(arr[6]);
System.out.println(arr[7]);
System.out.println(arr[8]);
System.out.println(arr[9]);









i=0 arr[0]=100
i=1 arr[1]=100
i=2 arr[2]=100
...
i=9 arr[9]=100
i=10 false









arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
arr[4] = 100;
arr[5] = 100;
arr[6] = 100;
arr[7] = 100;
arr[8] = 100;
arr[9] = 100;














int[] arr = new int[3]; //0,0,0
arr[1] = 100; //给arr中第2个元素赋值为100 





arr[0]-------代表arr中的第1个元素(int)
arr[1]-------代表arr中的第2个元素(int)
arr[2]-------代表arr中的第3个元素(int)






int a=0;
int b=0;
int c=0;
b=100;

















//声明布尔型数组b，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[26];















//声明浮点型数组a，包含10个元素
//每个元素都是double型，默认值为0.0
double[] a = new double[10];













//声明整型数组a，包含4个元素
//每个元素都是int型，默认值0
int[] a = new int[4]; //0,0,0,0















int   a; //声明整型变量a
int[] a; //声明整型数组变量a




















将1万本书按照出版社分类存储-------设计了数据结构
想找java编程思想这本书------------算法依然不简单


将1万本书按照图书类别分类存储-----设计了数据结构
想找java编程思想这本书------------算法简单











软件是模拟现实生活的

你想在某种情况下跳出所有层循环的想法
--------------只是你自己想当然的想法而已











for(int i=0;i<100;i++){
  for(int j=0;j<200;j++){
    for(int k=0;k<300;k++){
	  if(){
	    break; //只跳出k层的循环
	  }
      System.out.println("aaa");
	}
  }
}

i=0
  j=0
    k走30次
  j=1
    k走30次
  ...
  j=19
    k走30次
  



i=1
  j=0/1/2/...19/20时结束
...
i=9
  j=0/1/2/...19/20时结束
i=10














1*1=1
1*2=2 2*2=4
1*3=3 2*3=6 3*3=9



1*4=4   2*4=8   3*4=12  4*4=16  
1*5=5   2*5=10  3*5=15  4*5=20  5*5=25  












int i=0;
while(i<10){
  i++;
}
System.out.println(i); //10


int i;
for(i=0;i<10;i++){
}
System.out.println(i); //10
























听得懂，就是写不出来-------------正常情况

听不懂，也是写(更多的写)


部门经理，架构师
项目经理，设计工程师
coding，程序员，软件工程师




















